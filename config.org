#+TITLE: rob25conf
#+AUTHOR: Roberto
#+DESCRIPTION: A primer for a personal Emacs config.
#+STARTUP: showeverything
#+OPTIONS: toc:2

* TABLE OF CONTENTS :toc:
- [[#dependencies][DEPENDENCIES]]
- [[#important-programs-to-load-first][IMPORTANT PROGRAMS TO LOAD FIRST]]
  - [[#adding-the-scripts-directory-to-path][Adding the scripts directory to path]]
  - [[#constants][Constants]]
  - [[#sourcing-the-scripts][Sourcing the scripts]]
  - [[#load-evil-mode][Load Evil mode]]
  - [[#general-keybindings][General keybindings]]
  - [[#org-tempo][org-tempo]]
- [[#all-the-icons][ALL THE ICONS]]
- [[#app-launcher][APP LAUNCHER]]
  - [[#counsel-linux-app][Counsel Linux App]]
  - [[#app-launcher-1][App-Launcher]]
- [[#auto-revert-mode][AUTO REVERT MODE]]
- [[#backup][BACKUP]]
- [[#beacon][BEACON]]
- [[#company][COMPANY]]
- [[#decorations][DECORATIONS]]
- [[#delete-selection][DELETE SELECTION]]
- [[#diminish][DIMINISH]]
- [[#dired][DIRED]]
- [[#disable-angular-brackets][DISABLE ANGULAR BRACKETS]]
- [[#enable-electric-pair-mode][ENABLE ELECTRIC PAIR MODE]]
- [[#flycheck][FLYCHECK]]
- [[#fonts][FONTS]]
  - [[#setting-the-font-face][Setting the Font Face]]
  - [[#zooming-inout][Zooming In/Out]]
- [[#graphical-user-interface-tweaks][GRAPHICAL USER INTERFACE TWEAKS]]
  - [[#disable-menubar-toolbars-scrollbars-and-blinking-cursor][Disable Menubar, Toolbars, Scrollbars and Blinking cursor]]
  - [[#display-line-numbers-and-truncated-lines][Display Line Numbers and Truncated Lines]]
  - [[#hide-emphasis-markers][Hide Emphasis Markers]]
- [[#git-programs][GIT PROGRAMS]]
  - [[#git-time-machine][Git Time Machine]]
  - [[#magit][Magit]]
- [[#highlight-todo][HIGHLIGHT TODO]]
- [[#ivy-counsel][IVY (COUNSEL)]]
- [[#language-support][LANGUAGE SUPPORT]]
- [[#minibuffer-escape][MINIBUFFER ESCAPE]]
- [[#modeline][MODELINE]]
- [[#neotree][NEOTREE]]
- [[#org-mode][ORG-MODE]]
  - [[#enabling-table-of-contents][Enabling Table of Contents]]
  - [[#enabling-org-bullets][Enabling Org Bullets]]
  - [[#diminish-org-indent][Diminish org indent]]
  - [[#disable-electric-indent][Disable Electric Indent]]
  - [[#org-babel-languages][Org babel languages]]
  - [[#org-level-headers][Org Level Headers]]
- [[#parinfer][PARINFER]]
- [[#perspective][PERSPECTIVE]]
- [[#projectile][PROJECTILE]]
- [[#shells-and-terminals][SHELLS AND TERMINALS]]
  - [[#eshell][Eshell]]
  - [[#vterm][Vterm]]
  - [[#vterm-toggle][Vterm-toggle]]
- [[#rainbow-delimiters][RAINBOW DELIMITERS]]
- [[#rainbow-mode][RAINBOW MODE]]
- [[#scrolling][SCROLLING]]
- [[#startup][STARTUP]]
  - [[#doom-emacs-trick-with-the-gc-for-faster-startup][Doom emacs trick with the GC for faster startup]]
- [[#sudo-edit][SUDO EDIT]]
- [[#splash-screen][SPLASH SCREEN]]
  - [[#for-emacs-daemon][For Emacs Daemon]]
- [[#theme][THEME]]
- [[#tldr][TLDR]]
- [[#transparency][TRANSPARENCY]]
- [[#undo-tree][UNDO-TREE]]
- [[#which-key][WHICH-KEY]]
- [[#12][]]

* DEPENDENCIES  
- CMake =sudo apt install cmake=
- libtool-bin =sudo apt-get install libtool-bin=

* IMPORTANT PROGRAMS TO LOAD FIRST

** Adding the scripts directory to path
#+begin_src emacs-lisp
(add-to-list 'load-path "~/.config/emacs/scripts/")
#+end_src

** Constants
#+begin_src emacs-lisp
;; environment
(defconst *is-windows* (eq system-type 'windows-nt))
(defconst *is-unix* (not *is-windows*))
#+end_src

** Sourcing the scripts
#+begin_src emacs-lisp
(require 'elpaca-setup)
(require 'buffer-move)
(require 'undo-tree)
#+end_src
  
** Load Evil mode
#+begin_src emacs-lisp
  ;; Expands to: (elpaca evil (use-package evil :demand t))
  (use-package evil
    :ensure t
    :init
    (setq evil-want-integration t)
    (setq evil-want-keybinding nil)
    (setq evil-vsplit-window-right t)
    (setq evil-split-window-below t)
    (evil-mode))

  (use-package evil-collection
    :after evil
    :ensure t
    :config
    (setq evil-collection-mode-list '(dashboard dired ibuffer))
    (add-to-list 'evil-collection-mode-list 'help) ; Hope dont break anything
    (evil-collection-init))

  (use-package evil-tutor :ensure t)

  ;;Turns off elpaca-use-package-mode current declaration
  ;;Note this will cause evaluate the declaration immediately. It is not deferred.
  ;;Useful for configuring built-in emacs features.
  (use-package emacs :ensure nil :config (setq ring-bell-function #'ignore))
  
(setq evil-undo-system 'undo-redo)   

(with-eval-after-load 'evil-maps
  (define-key evil-motion-state-map (kbd "SPC") nil)
  (define-key evil-motion-state-map (kbd "RET") nil)
  (define-key evil-motion-state-map (kbd "TAB") nil))
(setq org-return-follows-link t)

#+end_src

** General keybindings

#+begin_src emacs-lisp
(use-package general
  :ensure t
  :config
  (general-evil-setup)

  ;; set up 'SPC' as the global leader key
  (general-create-definer dt/leader-keys
    :states '(normal insert visual emacs)
    :keymaps 'override
    :prefix "SPC"
    :global-prefix "s-SPC")

  (dt/leader-keys
    "SPC" '(counsel-M-x :wk "Counsel M-x")
    "." '(find-file :wk "Find file")
    "=" '(perspective-map :wk "Perspective") ;; Lists all the perspective keybindings
    "0" '(beacon-blink :wk "Find cursor")
    "f" '(:ignore t :wk "Frequent files")
    "f c" '((lambda () (interactive) (find-file "~/.config/emacs/config.org")) :wk "Edit emacs config")
    "f r" '(counsel-recentf :wk "Find recent files")
    "TAB" '(:ignore t :wk "Comment out")
    "TAB TAB" '(comment-line :wk "Comment lines"))
  
  (dt/leader-keys
    "b" '(:ignore t :wk "Bookmarks/Buffers")
    "b c" '(clone-indirect-buffer :wk "Create indirect buffer copy in a split")
    "b C" '(clone-indirect-buffer-other-window :wk "Clone indirect buffer in new window")
    "b d" '(bookmark-delete :wk "Delete bookmark")
    "b i" '(ibuffer :wk "Ibuffer")
    "b k" '(kill-this-buffer :wk "Kill this buffer")
    "b K" '(kill-some-buffers :wk "Kill multiple buffers")
    "b l" '(list-bookmarks :wk "List bookmarks")
    "b m" '(bookmark-set :wk "Set bookmark")
    "b n" '(next-buffer :wk "Next buffer")
    "b p" '(previous-buffer :wk "Previous buffer")
    "b r" '(revert-buffer :wk "Reload buffer")
    "b R" '(rename-buffer :wk "Rename buffer")
    "b s" '(basic-save-buffer :wk "Save buffer")
    "b S" '(save-some-buffers :wk "Save multiple buffers")
    "b w" '(bookmark-save :wk "Save current bookmarks to bookmark file"))

  (dt/leader-keys
    "d" '(:ignore t :wk "Dired")
    "d d" '(dired :wk "Open dired")
    "d j" '(dired-jump :wk "Dired jump to current")
    "d n" '(neotree-dir :wk "Open directory in neotree")
    "d p" '(peep-dired :wk "Peep-dired"))

  (dt/leader-keys
    "e" '(:ignore t :wk "Eshell/Evaluate")
    "e b" '(eval-buffer :wk "Evaluate elisp in buffer")
    "e d" '(eval-defun :wk "Evaluate defun containing or after point")
    "e e" '(eval-expression :wk "Evaluate an elisp expression")
    "e h" '(counsel-esh-history :wk "Eshell history")
    "e l" '(eval-last-sexp :wk  "Evaluate elisp expression before point")
    "e r" '(eval-region :wk "Evaluate elisp in region")
    "e s" '(eshell :wk "Eshell"))
  
  (dt/leader-keys
    "g" '(:ignore t :wk "Git")    
    "g /" '(magit-displatch :wk "Magit dispatch")
    "g ." '(magit-file-displatch :wk "Magit file dispatch")
    "g b" '(magit-branch-checkout :wk "Switch branch")
    "g c" '(:ignore t :wk "Create") 
    "g c b" '(magit-branch-and-checkout :wk "Create branch and checkout")
    "g c c" '(magit-commit-create :wk "Create commit")
    "g c f" '(magit-commit-fixup :wk "Create fixup commit")
    "g C" '(magit-clone :wk "Clone repo")
    "g f" '(:ignore t :wk "Find") 
    "g f c" '(magit-show-commit :wk "Show commit")
    "g f f" '(magit-find-file :wk "Magit find file")
    "g f g" '(magit-find-git-config-file :wk "Find gitconfig file")
    "g F" '(magit-fetch :wk "Git fetch")
    "g g" '(magit-status :wk "Magit status")
    "g i" '(magit-init :wk "Initialize git repo")
    "g l" '(magit-log-buffer-file :wk "Magit buffer log")
    "g r" '(vc-revert :wk "Git revert file")
    "g s" '(magit-stage-file :wk "Git stage file")
    "g t" '(git-timemachine :wk "Git time machine")
    "g u" '(magit-stage-file :wk "Git unstage file"))
  
  (dt/leader-keys
    "h" '(:ignore t :wk "Help")
    "h a" '(counsel-apropos :wk "Apropos")
    "h b" '(describe-bindings :wk "Describe bindings")
    "h c" '(describe-char :wk "Describe character under cursor")
    "h d" '(:ignore t :wk "Emacs documentation")
    "h d a" '(about-emacs :wk "About Emacs")
    "h d d" '(view-emacs-debugging :wk "View Emacs debugging")
    "h d f" '(view-emacs-FAQ :wk "View Emacs FAQ")
    "h d m" '(info-emacs-manual :wk "The Emacs manual")
    "h d n" '(view-emacs-news :wk "View Emacs news")
    "h d o" '(describe-distribution :wk "How to obtain Emacs")
    "h d p" '(view-emacs-problems :wk "View Emacs problems")
    "h d t" '(view-emacs-todo :wk "View Emacs todo")
    "h d w" '(describe-no-warranty :wk "Describe no warranty")
    "h e" '(view-echo-area-messages :wk "View echo area messages")
    "h f" '(describe-function :wk "Describe function")
    "h F" '(describe-face :wk "Describe face")
    "h g" '(describe-gnu-project :wk "Describe GNU Project")
    "h i" '(info :wk "Info")
    "h I" '(describe-input-method :wk "Describe input method")
    "h k" '(describe-key :wk "Describe key")
    "h l" '(view-lossage :wk "Display recent keystrokes and the commands run")
    "h L" '(describe-language-environment :wk "Describe language environment")
    "h m" '(describe-mode :wk "Describe mode")
    "h r" '(:ignore t :wk "Reload")
    "h r r" '((lambda () (interactive)
                (load-file "~/.config/emacs/init.el")
                (ignore (elpaca-process-queues)))
              :wk "Reload emacs config")
    "h t" '(load-theme :wk "Load theme")
    "h v" '(describe-variable :wk "Describe variable")
    "h w" '(where-is :wk "Prints keybinding for command if set")
    "h x" '(describe-command :wk "Display full documentation for command"))

  (dt/leader-keys
    "m" '(:ignore t :wk "Org")
    "m a" '(org-agenda :wk "Org agenda")
    "m e" '(org-export-dispatch :wk "Org export dispatch")
    "m i" '(org-toggle-item :wk "Org toggle item")
    "m t" '(org-todo :wk "Org todo")
    "m B" '(org-babel-tangle :wk "Org babel tangle")
    "m T" '(org-todo-list :wk "Org todo list"))

  (dt/leader-keys
    "m b" '(:ignore t :wk "Tables")
    "m b -" '(org-table-insert-hline :wk "Insert hline in table"))

  (dt/leader-keys
    "m d" '(:ignore t :wk "Date/Deadline")
    "m d t" '(org-time-stamp :wk "Org time stamp"))

  (dt/leader-keys
    "o" '(:ignore t :wk "Open")
    "o d" '(dashboard-open :wk "Dashboard")
    ;; "o e" '(elfeed :wk "Elfeed RSS")
    "o f" '(make-frame :wk "Open buffer in new frame")
    "o F" '(select-frame-by-name :wk "Select frame by name"))
  
  ;; projectile-command-map already has a ton of bindings 
  ;; set for us, so no need to specify each individually.
  (dt/leader-keys
    "p" '(projectile-command-map :wk "Projectile"))
  
  (dt/leader-keys
    "s" '(:ignore t :wk "Search")
    "s d" '(dictionary-search :wk "Search dictionary")
    "s m" '(man :wk "Man pages")
    "s t" '(tldr :wk "Lookup TLDR docs for a command")
    "s w" '(woman :wk "Similar to man but doesn't require man"))

  (dt/leader-keys
    "t" '(:ignore t :wk "Toggle")
    "t e" '(eshell-toggle :wk "Toggle eshell")
    "t f" '(flycheck-mode :wk "Toggle flycheck")
    "t l" '(display-line-numbers-mode :wk "Toggle line numbers")
    "t n" '(neotree-toggle :wk "Toggle neotree file viewer")
    "t o" '(org-mode :wk "Toggle org mode")
    "t r" '(rainbow-mode :wk "Toggle rainbow mode")
    "t t" '(visual-line-mode :wk "Toggle truncated lines")
    "t v" '(vterm-toggle :wk "Toggle vterm"))

  (dt/leader-keys
    "w" '(:ignore t :wk "Windows")
    "w c" '(evil-window-delete :wk "Delete window")
    "w n" '(evil-window-new :wk "New window")
    "w s" '(evil-window-split :wk "Horizontal split window")
    "w v" '(evil-window-vsplit :wk "Vertical split window")
    ;; Window motion
    "w h" '(evil-window-left :wk "Window left")
    "w l" '(evil-window-right :wk "Window right")
    "w j" '(evil-window-down :wk "Window down")
    "w k" '(evil-window-up :wk "Window up")
    "w w" '(evil-window-next :wk "Next window")
    "w W" '(evil-window-prev :wk "Previous window")
    ;; Reorder windows
    "w H" '(buf-move-left :wk "Move buffer left")
    "w J" '(buf-move-down :wk "Move buffer down")
    "w K" '(buf-move-up :wk "Move buffer up")
    "w L" '(buf-move-right :wk "Move buffer right"))
  )
#+end_src

** org-tempo
#+begin_src emacs-lisp
  (require 'org-tempo)
  (add-to-list 'org-structure-template-alist
               '("m"."src emacs-lisp"))
  (add-to-list 'org-structure-template-alist
               '("hb" . "src racket :lang htdp/bsl"))
#+end_src

* ALL THE ICONS
This is an icon set that can be used with dashboard, dired, ibuffer and other Emacs programs.
#+begin_src emacs-lisp
  (use-package all-the-icons
    :ensure t
    :if (display-graphic-p))

  (use-package all-the-icons-dired
    :ensure t
    :hook (dired-mode . (lambda () (all-the-icons-dired-mode t))))
#+end_src

* APP LAUNCHER

** Counsel Linux App
Since we have counsel installed, we can use counsel-linux-app to launch our Linux apps. It list the apps by their executable command, so it’s kind of tricky to use.
You should bind this to a keybinding:
=emacsclient -cF "((visibility . nil))" -e "(emacs-counsel-launcher)"=
#+begin_src emacs-lisp
  (defun emacs-counsel-launcher ()
    "Create and select a frame called emacs-counsel-launcher which consist only of a minibuffer and has specific dimensions. Runs counsel-linux-app on that frame, which is an emacs command that prompts you to select an app and open it in a dmenu like behaviour. Delete the frame after that command has exited"
    (interactive)
    (with-selected-frame
      (make-frame '((name . "emacs-run-launcher")
                    (minibuffer . only) 
                    (fullscreen . 0) ; no fullscreen
                    (undecorated . t) ; remove title bar
                    (internal-border-width . 10)
                    (width . 80)
                    (height . 11)))
      (unwind-protect
        (counsel-linux-app)
        (delete-frame))))
#+end_src

** App-Launcher
The =app-launcher= is a better run launcher since it reads the desktop applications on your system and you can search them by their names as defined in their desktop file.  This means that sometimes you have to search for a generic term rather than the actual binary command of the program.
#+begin_src emacs-lisp
(use-package app-launcher
  :ensure '(app-launcher :host github :repo "SebastienWae/app-launcher"))
 ;; create a global keyboard shortcut with the following code
 ;; emacsclient -cF "((visibility . nil))" -e "(emacs-run-launcher)"

(defun emacs-run-launcher ()
  "Create and select a frame called emacs-run-launcher which consists only of a minibuffer and has specific dimensions. Runs app-launcher-run-app on that frame, which is an emacs command that prompts you to select an app and open it in a dmenu like behaviour. Delete the frame after that command has exited"
  (interactive)
  (with-selected-frame 
    (make-frame '((name . "emacs-run-launcher")
                  (minibuffer . only)
                  (fullscreen . 0) ; no fullscreen
                  (undecorated . t) ; remove title bar
                  ;;(auto-raise . t) ; focus on this frame
                  ;;(tool-bar-lines . 0)
                  ;;(menu-bar-lines . 0)
                  (internal-border-width . 10)
                  (width . 80)
                  (height . 11)))
                  (unwind-protect
                    (app-launcher-run-app)
                    (delete-frame))))
#+end_src

* AUTO REVERT MODE
#+begin_src emacs-lisp
(global-auto-revert-mode t)  
#+end_src

* BACKUP
#+begin_src emacs-lisp
(setq backup-directory-alist '((".*" . "~/.local/share/Trash/files")))
#+end_src

* BEACON
I often lose track of my cursor...
#+begin_src emacs-lisp
(use-package beacon
  :ensure t
  :diminish beacon-mode
  :init
  (beacon-mode 1))
#+end_src

* COMPANY
=company= is a completion framework for Emacs. The name stands for "Complete Anything". Completion will start automatically after you type a few letters. Use M-p and M-n to select, <return> to complete or <TAB> to complete the common part.
#+begin_src emacs-lisp
(use-package company
  :ensure t
  :defer 2
  :diminish
  :custom
  (company-begin-commands '(self-insert-command))
  (company-idle-delay .1)
  (company-minimum-prefix-length 2)
  (company-show-numbers t)
  (company-tooltip-align-annotations 't)
  (global-company-mode t))

(use-package company-box
  :ensure t
  :after company
  :diminish
  :hook (company-mode . company-box-mode))
#+end_src

* DECORATIONS
Remove the window decorations
#+begin_src emacs-lisp
;; (set-frame-parameter nil 'undecorated t)
(add-to-list 'default-frame-alist '(undecorated . t))
#+end_src

* DELETE SELECTION
#+begin_src emacs-lisp
(delete-selection-mode 1) 
#+end_src

* DIMINISH
This package implements hiding or abbreviation of the modeline displays (lighters) of minor-modes.  With this package installed, you can add ‘:diminish’ to any use-package block to hide that particular mode in the modeline.
#+begin_src emacs-lisp
(use-package diminish :ensure t)
#+end_src

* DIRED
#+begin_src emacs-lisp
(use-package dired-open
  :ensure t
  :config 
  (setq dired-open-extensions '(("gif" . "sxiv")
				("jpg" . "sxiv")
				("png" . "sxiv")
				("mkv" . "mpv")
				("mp4" . "mpv"))))

(use-package peep-dired
  :after dired
  :ensure t
  :hook (evil-normalize-keymaps . peep-dired-hook)
  :config
  (evil-define-key 'normal dired-mode-map (kbd "h") 'dired-up-directory)
  (evil-define-key 'normal dired-mode-map (kbd "l") 'dired-open-file) ; use dired-find-file instead if not using dired-open package
  (evil-define-key 'normal peep-dired-mode-map (kbd "j") 'peep-dired-next-file)
  (evil-define-key 'normal peep-dired-mode-map (kbd "k") 'peep-dired-prev-file)) 
#+end_src

* DISABLE ANGULAR BRACKETS
#+begin_src emacs-lisp
;; (defun global-ignore-angle-brackets ()
;;   "Treat < and > as punctuation globally."
;;   (modify-syntax-entry ?< ".")
;;   (modify-syntax-entry ?> "."))

;; (add-hook 'after-change-major-mode-hook 'global-ignore-angle-brackets)   

(defun global-treat-angle-as-operators ()
  "Treat < and > as operators globally."
  (modify-syntax-entry ?< "'")
  (modify-syntax-entry ?> "'"))

(add-hook 'after-change-major-mode-hook 'global-treat-angle-as-operators)
#+end_src

* ENABLE ELECTRIC PAIR MODE
#+begin_src emacs-lisp
;; (electric-pair-mode 1)       ;; Turns on automatic parens pairing
;; ;; The following prevents <> from auto-pairing when electric-pair-mode is on.
;; ;; Otherwise, org-tempo is broken when you try to <s TAB...
;; (add-hook 'org-mode-hook (lambda ()
;;            (setq-local electric-pair-inhibit-predicate
;;                    `(lambda (c)
;;                   (if (char-equal c ?<) t (,electric-pair-inhibit-predicate c))))))

(add-hook 'emacs-lisp-mode-hook
          (lambda ()
            (electric-pair-local-mode 1))) 
(add-hook 'racket-mode-hook
	  (lambda ()
	    (electric-pair-local-mode 1)))
#+end_src

* FLYCHECK
Install =luacheck= from your Linux distro’s repositories for flycheck to work correctly with lua files. Install =python-pylint= for flycheck to work with python files. For more information on language support for flycheck, https://www.flycheck.org/en/latest/languages.html.
#+begin_src emacs-lisp
(use-package flycheck
  :ensure t
  :defer t
  :diminish
  :init (global-flycheck-mode))
#+end_src

* FONTS
Defining the various fonts that Emacs will use.

** Setting the Font Face
#+begin_src emacs-lisp
(unless (display-graphic-p)
  (set-face-attribute 'default nil
                      :font "JetBrains Mono"
                      :height 110
                      :weight 'medium)
  (set-face-attribute 'variable-pitch nil
                      :font "Ubuntu"
                      :height 120
                      :weight 'medium)
  (set-face-attribute 'fixed-pitch nil
                      :font "JetBrains Mono"
                      :height 110
                      :weight 'medium))
;; Makes commented text and keywords italics.
;; This is working in emacsclient but not emacs.
;; Your font must have an italic face available
(set-face-attribute 'font-lock-comment-face nil
		    :slant 'italic)

;; (unless (display-graphic-p)
;;   (set-face-attribute 'font-lock-keyword-face nil
;;                       :slant 'italic))

(set-face-attribute 'default-frame-alist '(font . "JetBrains Mono-11"))


(defun my-org-faces ()
  (set-face-attribute 'org-todo nil :height 0.8)
  (set-face-attribute 'org-level-1 nil :height 1.8)
  (set-face-attribute 'org-level-2 nil :height 1.5))

(add-hook 'org-mode-hook #'my-org-faces)
(setq-default line-spacing 0.12)
#+end_src

** Zooming In/Out
You can use the bindings CTRL plus =/- for zooming in/out. You can also use the CTRL plus the mouse wheel for zooming in/out.
#+begin_src emacs-lisp
(global-set-key (kbd "C-=") 'text-scale-increase)
(global-set-key (kbd "C--") 'text-scale-decrease)
(global-set-key (kbd "<C-wheel-up>") 'text-scale-increase)
(global-set-key (kbd "<C-wheel-down>") 'text-scale-decrease)
#+end_src

* GRAPHICAL USER INTERFACE TWEAKS
Let's make GNU Emacs look a little better.

** Disable Menubar, Toolbars, Scrollbars and Blinking cursor
#+begin_src emacs-lisp
(menu-bar-mode -1)
(tool-bar-mode -1)
(unless (display-graphic-p)
  (scroll-bar-mode -1))
(blink-cursor-mode 0)   
#+end_src

** Display Line Numbers and Truncated Lines
#+begin_src emacs-lisp
(global-display-line-numbers-mode 1)
(global-visual-line-mode 1)
#+end_src

** Hide Emphasis Markers
#+begin_src emacs-lisp
(setq org-hide-emphasis-markers t)
#+end_src

* GIT PROGRAMS
** Git Time Machine
git-timemachine is a program that allows you to move backwards and forwards through a file’s commits.  ‘SPC g t’ will open the time machine on a file if it is in a git repo.  Then, while in normal mode, you can use ‘CTRL-j’ and ‘CTRL-k’ to move backwards and forwards through the commits.
#+begin_src emacs-lisp
(use-package git-timemachine
  :after git-timemachine
  :ensure t
  :hook (evil-normalize-keymaps . git-timemachine-hook)
  :config
    (evil-define-key 'normal git-timemachine-mode-map (kbd "C-j") 'git-timemachine-show-previous-revision)
    (evil-define-key 'normal git-timemachine-mode-map (kbd "C-k") 'git-timemachine-show-next-revision)
)
#+end_src

** Magit
Magit is a full-featured git client for Emacs.
#+begin_src emacs-lisp
(use-package transient :ensure t)

(use-package magit
  :ensure t
  :after transient)
#+end_src

* HIGHLIGHT TODO
#+begin_src emacs-lisp
(use-package hl-todo
  :ensure t
  :hook ((org-mode . hl-todo-mode)
         (prog-mode . hl-todo-mode))
  :config
  (setq hl-todo-highlight-punctuation ":"
        hl-todo-keyword-faces
        `(("TODO"       warning bold)
          ("FIXME"      error bold)
          ("HACK"       font-lock-constant-face bold)
          ("REVIEW"     font-lock-keyword-face bold)
          ("NOTE"       success bold)
          ("DEPRECATED" font-lock-doc-face bold))))
#+end_src

* IVY (COUNSEL)
+ Ivy, a generic completion machanism for Emacs.
+ Counsel, a collection of Ivy-enhanced vrsions of common Emacs commands.
+ Ivy-rich allows us to add descriptions alongside the commands in M-x.
#+begin_src emacs-lisp
(use-package counsel
  :after ivy
  :ensure t
  :diminish
  :config (counsel-mode))
  
(use-package ivy
  :ensure t
  :bind
  ;; ivy-resume resumes the last Ivy-based completion.
  (("C-c C-r" . ivy-resume)
   ("C-x B" . ivy-switch-buffer-other-window))
  :diminish
  :custom
  (setq ivy-use-virtual-buffers t)
  (setq ivy-count-format "(%d/%d) ")
  (setq enable-recursive-minibuffers t)
  :config
  (ivy-mode))

(use-package all-the-icons-ivy-rich
  :ensure t
  :init (all-the-icons-ivy-rich-mode 1))

(use-package ivy-rich
  :after ivy
  :ensure t
  :init (ivy-rich-mode 1) ;; This gets us deescriptions in M-x.
  :custom
  (ivy-virtual-abbreviate 'full
   ivy-rich-switch-buffer-align-virtual-buffer t
   ivy-rich-path-style 'abbrev)
  :config
  (ivy-set-display-transformer 'ivy-switch-buffer
			       'ivy-rich-switch-buffer-transformer))
#+end_src

* LANGUAGE SUPPORT
Emacs has built-in programming language modes for Lisp, Scheme, DSSSL, Ada, ASM, AWK, C, C++, Fortran, Icon, IDL (CORBA), IDLWAVE, Java, Javascript, M4, Makefiles, Metafont, Modula2, Object Pascal, Objective-C, Octave, Pascal, Perl, Pike, PostScript, Prolog, Python, Ruby, Simula, SQL, Tcl, Verilog, and VHDL.  Other languages will require you to install additional modes.
#+begin_src emacs-lisp
(use-package racket-mode :ensure t)
(use-package lua-mode :ensure t)
#+end_src

* MINIBUFFER ESCAPE
No more Triple ESC to quit the minibuffer.
#+begin_src emacs-lisp
(global-set-key [escape] 'keyboard-escape-quit)
#+end_src

* MODELINE

#+begin_src emacs-lisp
(set-face-attribute 'mode-line nil :box nil)
(set-face-attribute 'mode-line-inactive nil :box nil)   

;; (use-package doom-modeline
;;   :ensure t
;;   :init (doom-modeline-mode 1)
;;   :config
;;   (setq doom-modeline-height 30
;; 	doom-modeline-bar-width 5
;; 	doom-modeline-persp-name t
;; 	doom-modeline-persp-icon t))

;; (use-package anzu
;;   :defer 1
;;   :after isearch
;;   :ensure t
;;   :config
;;   (global-anzu-mode 1))

;; (use-package minions
;;   :defer 1
;;   :ensure t
;;   :config
;;   (minions-mode 1))

;; (use-package doom-modeline
;;   :demand t
;;   :ensure t
;;   :custom
;;   (inhibit-compacting-font-caches t)
;;   (doom-modeline-height 28)
;;   ;; 1 minor mode will be shown thanks to minions
;;   (doom-modeline-minor-modes t)
;;   (doom-modeline-hud t)
;;   :config
;;   (doom-modeline-mode 1))
#+end_src

#+RESULTS:
: [nil 26846 60959 34353 nil elpaca-process-queues nil nil 49000 nil]

* NEOTREE
Neotree is a file tree viewer.  When you open neotree, it jumps to the current file thanks to neo-smart-open.  The neo-window-fixed-size setting makes the neotree width be adjustable.  NeoTree provides following themes: classic, ascii, arrow, icons, and nerd.  Theme can be configed by setting “two” themes for neo-theme: one for the GUI and one for the terminal.  I like to use ‘SPC t’ for ‘toggle’ keybindings, so I have used ‘SPC t n’ for toggle-neotree.

| COMMAND        | DESCRIPTION                 | KEYBINDING |
|----------------+-----------------------------+------------|
| neotree-toggle | /Toggle neotree/            | SPC t n    |
| neotree-dir    | /Open directory in neotree/ | SPC d n    |

#+begin_src emacs-lisp
(use-package neotree
  :ensure t
  :config
  (setq neo-smart-open t
	neo-show-hidden-files t
	neo-window-width 55
	neo-window-fixed-size nil
	inhibit-compacting-font-caches t
	projectile-switch-project-action 'neotree-projectile-action)
  ;; Truncate long filenames in neotree
  (add-hook 'neo-after-create-hook
	    #'(lambda (_)
		(with-current-buffer (get-buffer neo-buffer-name)
		  (setq truncate-lines t)
		  (setq word-wrap nil)
		  (make-local-variable 'auto-hscroll-mode)
		  (setq auto-hscroll-mode nil)))))
#+end_src

* ORG-MODE
** Enabling Table of Contents
#+begin_src emacs-lisp
(use-package toc-org
  :ensure t
  :commands toc-org-enable
  :init (add-hook 'org-mode-hook 'toc-org-enable))
#+end_src

** Enabling Org Bullets
#+begin_src emacs-lisp
(add-hook 'org-mode-hook 'org-indent-mode)
(use-package org-bullets :ensure t)
(add-hook  'org-mode-hook (lambda () (org-bullets-mode 1)))
#+end_src

** Diminish org indent
#+begin_src emacs-lisp
(use-package org-indent
  :diminish org-indent-mode)
#+end_src

** Disable Electric Indent
#+begin_src emacs-lisp
(electric-indent-mode -1)
(setq org-edit-src-content-indentation 0)
#+end_src

** Org babel languages
*** For Racket
From the amazing work of DEADB17: https://github.com/DEADB17/ob-racket
#+begin_src emacs-lisp
(add-to-list 'load-path "~/.config/emacs/langs/ob-racket")

(require 'ob-racket)

(use-package ob-racket
  :after org
  ;; :ensure t
  :pin manual
  :config
  (append '((racket . t) (scribble . t)) org-babel-load-languages))
#+end_src

** Org Level Headers
#+begin_src emacs-lisp
(custom-set-faces
 '(org-level-1 ((t (:inherit outline-1 :height 1.7))))
 '(org-level-2 ((t (:inherit outline-2 :height 1.6))))
 '(org-level-3 ((t (:inherit outline-3 :height 1.5))))
 '(org-level-4 ((t (:inherit outline-4 :height 1.4))))
 '(org-level-5 ((t (:inherit outline-5 :height 1.3))))
 '(org-level-6 ((t (:inherit outline-5 :height 1.2))))
 '(org-level-7 ((t (:inherit outline-5 :height 1.1)))))
#+end_src

* PARINFER
#+begin_src emacs-lisp
(use-package parinfer-rust-mode
  :ensure t
  ;; :defer 1
  :hook
  emacs-lisp-mode
  racket-mode
  lisp-mode
  clojure-mode
  :custom
  (parinfer-rust-auto-download t))
#+end_src

* PERSPECTIVE
Perspective provides multiple named workspaces (or “perspectives”) in Emacs, similar to multiple desktops in window managers.  Each perspective has its own buffer list and its own window layout, along with some other isolated niceties, like the xref ring.
#+begin_src emacs-lisp
(use-package perspective
  :ensure t
  :custom
  ;; NOTE! I have also set 'SCP =' to open the perspective menu.
  ;; I'm only setting the additional binding because setting it
  ;; helps suppress an annoying warning message.
  (persp-mode-prefix-key (kbd "C-c M-p"))
  :init 
  (persp-mode)
  :config
  ;; Sets a file to write to when we save states
  (setq persp-state-default-file "~/.config/emacs/sessions"))

;; This will group buffers by persp-name in ibuffer.
(add-hook 'ibuffer-hook
          (lambda ()
            (persp-ibuffer-set-filter-groups)
            (unless (eq ibuffer-sorting-mode 'alphabetic)
              (ibuffer-do-sort-by-alphabetic))))

;; Automatically save perspective states to file when Emacs exits.
(add-hook 'kill-emacs-hook #'persp-state-save)
#+end_src

* PROJECTILE
Projectile is a project interaction library for Emacs.  
#+begin_src emacs-lisp
(use-package projectile
  :ensure t
  :diminish
  :config
  (projectile-mode 1))
#+end_src

* SHELLS AND TERMINALS

** Eshell
Eshell is an Emacs /shell/ that is written in elisp
#+begin_src emacs-lisp
  (use-package eshell-syntax-highlighting
    :after esh-mode
    :ensure t
    :config 
    (eshell-syntax-highlighting-global-mode +1))
  
;; eshell-syntax-highlighting -- adds fish/zsh-like syntax highlighting.
;; eshell-rc-script -- your profile for eshell; like a bashrc for eshell.
;; eshell-aliases-file -- sets an aliases file for the eshell.
  
(setq eshell-rc-script (concat user-emacs-directory "eshell/profile")
      eshell-aliases-file (concat user-emacs-directory "eshell/aliases")
      eshell-history-size 5000
      eshell-buffer-maximum-lines 5000
      eshell-hist-ignoredups t
      eshell-scroll-to-bottom-on-input t
      eshell-destroy-buffer-when-process-dies t
      eshell-visual-commands'("bash" "fish" "htop" "ssh" "top" "zsh"))
#+end_src

** Vterm
#+begin_src emacs-lisp
(use-package vterm
  :ensure t
  :config
  (setq shell-file-name "/bin/bash"
        vterm-max-scrollback 5000))
#+end_src

** Vterm-toggle
#+begin_src emacs-lisp
(use-package vterm-toggle
  :after vterm
  :ensure t
  :config
  (setq vterm-toggle-fullscreen-p nil)
  (setq vterm-toggle-scope 'project)
  (add-to-list 'display-buffer-alist
               '((lambda (buffer-or-name _)
                   (let ((buffer (get-buffer buffer-or-name)))
                     (with-current-buffer buffer
                       (or (equal major-mode 'vterm-mode)
                           (string-prefix-p vterm-buffer-name (buffer-name buffer))))))
                 (display-buffer-reuse-window display-buffer-at-bottom)
                 ;;(display-buffer-reuse-window display-buffer-in-direction)
                 ;;display-buffer-in-direction/direction/dedicated is added in emacs27
                 ;;(direction . bottom)
                 ;;(dedicated . t) ;dedicated is supported in emacs27
                 (reusable-frames . visible)
                 (window-height . 0.3))))
#+end_src

* RAINBOW DELIMITERS
#+begin_src emacs-lisp
(use-package rainbow-delimiters
  :defer 1
  :ensure t
  :hook (prog-mode . rainbow-delimiters-mode)
  :config
  (set-face-attribute 'rainbow-delimiters-unmatched-face nil
                      :foreground "red"
                      :inherit 'error
                      :box t))
#+end_src

* RAINBOW MODE
#+begin_src emacs-lisp
(use-package rainbow-mode
  :ensure t
  :diminish
  :hook org-mode prog-mode)
#+end_src

* SCROLLING
#+begin_src emacs-lisp
(setq scroll-conservatively 101
      scroll-step 1)   

(setq scroll-margin 8)
#+end_src

* STARTUP
** Doom emacs trick with the GC for faster startup
From the Github of Meatcar
#+begin_src emacs-lisp
;; max memory available for gc on startup
(defvar me/gc-cons-threshold 16777216)
(setq gc-cons-threshold most-positive-fixnum
      gc-cons-percentage 0.6)
(add-hook 'emacs-startup-hook
          (lambda ()
            (setq gc-cons-threshold me/gc-cons-threshold
                  gc-cons-percentage 0.1)))

;; max memory available for gc when opening minibuffer
(defun me/defer-garbage-collection-h ()
  (setq gc-cons-threshold most-positive-fixnum))

(defun me/restore-garbage-collection-h ()
  ;; Defer it so that commands launched immediately after will enjoy the
  ;; benefits.
  (run-at-time
   1 nil (lambda () (setq gc-cons-threshold me/gc-cons-threshold))))

(add-hook 'minibuffer-setup-hook #'me/defer-garbage-collection-h)
(add-hook 'minibuffer-exit-hook #'me/restore-garbage-collection-h)
(setq garbage-collection-messages t)
#+end_src

* SUDO EDIT
=sudo-edit= gives us the ability to open files with sudo privileges or switch over to editing with sudo privileges if we initially opened the file without such privileges.
#+begin_src emacs-lisp
  (use-package sudo-edit
    :ensure t
    :config
    (dt/leader-keys
      "f u" '(sudo-edit-find-file :wk "Sudo find file")
      "f U" '(sudo-edit :wk "Sudo edit file")))
#+end_src

* SPLASH SCREEN
Directly from: https://github.com/emacs-dashboard/emacs-dashboard?tab=readme-ov-file

#+begin_src emacs-lisp
(use-package dashboard
  :ensure t
  :diminish dashboard-mode
  :config
  ;; (setq dashboard-banner-logo-title "Welcome to Emacs!")
					;options: 'logo 'official "*.png" "*.txt" (cons "op1" "op2")
  ;; (setq dashboard-startup-banner 
  ;;       (if (display-graphic-p) 
  ;;           "~/.config/emacs/banners/ascii.txt"
  ;;         "~/.config/emacs/banners/mini-marivector.png"))       
  ;; (if (display-graphic-p)
  ;;     (setq dashboard-startup-banner "~/.config/emacs/banners/ascii.txt")
  ;;     (setq dashboard-startup-banner "~/.config/emacs/banners/mini-marivector.png"))
  (add-hook 'elpaca-after-init-hook #'dashboard-insert-startupify-lists)
  (add-hook 'elpaca-after-init-hook #'dashboard-initialize)
  (setq dashboard-items '((recents  . 5)
                          (bookmarks . 3)))
  ;; (setq dashboard-items '((recents  . 5)))
  (setq dashboard-center-content t)
  (dashboard-setup-startup-hook))

;; (if (display-graphic-p)
;;     (setq dashboard-startup-banner "~/.config/emacs/banners/ascii.txt")
;;     (setq dashboard-startup-banner "~/.config/emacs/banners/mini-marivector.png"))

(setq dashboard-startup-banner
      (if (display-graphic-p)
          "~/.config/emacs/banners/mini-marivector.png"
        "~/.config/emacs/banners/ascii.txt"))   
#+end_src

** For Emacs Daemon
#+begin_src emacs-lisp
  (setq initial-buffer-choice 
        (lambda () (get-buffer-create dashboard-buffer-name)))
#+end_src

* THEME
#+begin_src emacs-lisp
(add-to-list 'custom-theme-load-path "~/.config/emacs/themes/")

(use-package doom-themes
  :ensure t
  :config
  (setq doom-themes-enable-bold t
	doom-themes-enable-italic t)
  ;; (doom-themes-neotree-config)
  )

(load-theme 'silkworm t)
;; (load-theme 'doom-henna t)
#+end_src

* TLDR
#+begin_src emacs-lisp
(use-package tldr
  :ensure t)
#+end_src

* TRANSPARENCY
With Emacs version 29, true transparency has been added.
#+begin_src emacs-lisp
(unless (display-graphic-p)
    (add-to-list 'default-frame-alist '(alpha-background . 90))) ; For all new frames henceforth
#+end_src 

* UNDO-TREE 
Make it appear at one side instead of bottom
#+begin_src emacs-lisp
(defun undo-tree-split-side-by-side (original-function &rest args)
  "Split undo-tree side-by-side"
  (let ((split-height-threshold nil)
        (split-width-threshold 0))
    (apply original-function args)))

(advice-add 'undo-tree-visualize :around #'undo-tree-split-side-by-side)

;; (defun undo-tree-hook ()
;;   "Hook to resize the undo-tree-visualizer window to a narrow width on the left."
;;   (interactive)
;;   (unless (not (get-buffer-window " *undo-tree*"))
;;     (save-excursion
;;       (select-window (get-buffer-window " *undo-tree*"))
;;       (evil-window-set-width 45)
;;       (evil-window-left 1))))

;; (add-hook 'undo-tree-visualizer-mode-hook 'undo-tree-hook)
#+end_src

* WHICH-KEY
#+begin_src emacs-lisp
(use-package which-key
  :ensure t
  :init
    (which-key-mode 1)
  :diminish
  :config
  (setq which-key-side-window-location 'bottom
	which-key-sort-order #'which-key-key-order-alpha
	which-key-sort-uppercase-first nil
	which-key-add-column-padding 1
	which-key-max-display-columns nil
	which-key-min-display-lines 6
	which-key-side-window-slot -10
	which-key-side-window-max-height 0.25
	which-key-idle-delay 0.8
	which-key-max-description-length 25
	which-key-allow-imprecise-window-fit nil
	which-key-separator " → "))
#+end_src

* TODO [1/2]
- [X] Make checkboses work correctly
- [ ] Checkout harpoon for emacs
